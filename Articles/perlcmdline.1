.\" Automatically generated by Pod::Man version 1.02
.\" Thu Jan  3 21:46:22 2002
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "PERLCMDLINE 1"
.TH PERLCMDLINE 1 "perl v5.6.0" "2002-01-03" "User Contributed Perl Documentation"
.UC
.SH "Title:  Handling Command Line Options in Perl programs"
.IX Header "Title:  Handling Command Line Options in Perl programs"
.SH "Author: Johan Vromans"
.IX Header "Author: Johan Vromans"
.SH "Introduction"
.IX Header "Introduction"
Controlling a computer by typing commands to a so-called \fIcommand line interpreter\fR is still most people's favorite way of working, despite the capabilities of modern window systems. When you know the names of the commands and their options, working from the command line is much less complicated and usually faster than complex series of mouse movements and button clicks. 
.PP
The way commands and options are specified depends on how the commands are interpreted, and who is handling the options. Sometimes this is the command line interpreter, but quite often the program that is run by the command has to handle the options itself. 
.PP
Under most moderns command shells, including the popular Unix and Windows shells, a command line consists of the name of the program to be executed, followed by zero or more options and arguments. There are two conventions on how options look like and should be interpreted: \fIoption letters\fR and \fIoption words\fR. 
.PP
In the case of option letters, options consist of a single dash followed by one or more characters, usually letters, each being interpreted individually. For example, `\f(CW\*(C`\-abc\*(C'\fR' means the same as `\f(CW\*(C`\-a \-b \-c\*(C'\fR'. When options take values it is usually possible to bundle the values as well. For example, `\f(CW\*(C`\-aw80L24x\*(C'\fR' means the same as `\f(CW\*(C`\-a \-w 80 \-L 24 \-x\*(C'\fR'. 
.PP
In the case of option words, options consist of a double dash followed by a single option word. When an option takes a value, the value follows the option word or can be appended to the option word using an equals sign. Using this convention, the previous example could read `\f(CW\*(C`\-\-all \-\-width=80 \-\-length 24 \-\-extend\*(C'\fR'. With option words, it is much easier to remember options and their meanings. 
.PP
In either case, options precede other program arguments and the recognition of options stops as soon as a non-option argument is encountered. A double dash on itself explicitly stops option recognition. 
.PP
Often combinations are allowed, for example, a program can accept `\f(CW\*(C`\-a\*(C'\fR' being the same as `\f(CW\*(C`\-\-all\*(C'\fR'. Some programs accept option words with just a single dash (and will not use option letters). Sometimes options and non-option arguments may be mixed. 
.PP
You've probably written programs that handle command line options like `\f(CW\*(C`\-h\*(C'\fR' for height, `\-w' for width, `\-v' for verbose, and so on. Some might be optional, some might be case-insensitive, some might not expect an argument afterward. With Perl, parsing options is not very hard to do, but after writing eight subroutines for eight programs, you might wonder whether there's a better way. There is \*(-- in fact, there are several ways. 
.SH "The simple way \*(-- `\f(CW\*(C`perl \-s\*(C'\fR'"
.IX Header "The simple way  `perl -s'"
The Perl interpreter itself supports the single-character style of options. The Perl script is free to interpret the command line arguments the way it likes. Perl uses a special command line option `\f(CW\*(C`\-s\*(C'\fR' to facilitate the option handling for scripts. Assuming you start Perl as follows: \f(CW\*(C`perl \-s script.pl \-foo \-bar myfile.dat\*(C'\fR 
.PP
Perl will remove anything that look like options (`\f(CW\*(C`\-foo\*(C'\fR' and `\f(CW\*(C`\-bar\*(C'\fR') from the command line and set corresponding variables (\f(CW\*(C`$foo\*(C'\fR and \f(CW\*(C`$bar\*(C'\fR) to a \fItrue\fR value. Note that the options are words but preceded with a single dash. When a command line argument is encountered that is not an option Perl will not look any further. 
.PP
Although this method is very limited it is quite useful to get started. 
.SH "The easy way \*(-- \f(CW\*(C`Getopt::Std\*(C'\fR"
.IX Header "The easy way  Getopt::Std"
Perl comes standard with two modules that assist programs in handling command line options: \f(CW\*(C`Getopt::Std\*(C'\fR and \f(CW\*(C`Getopt::Long\*(C'\fR. 
.PP
Module \f(CW\*(C`Getopt::Std\*(C'\fR provides two subroutines, \f(CW\*(C`getopt\*(C'\fR and \f(CW\*(C`getopts\*(C'\fR. These routines have in common that they use a single dash to identify option letters and they stop processing options when the first non-option is detected. 
.PP
Subroutine \f(CW\*(C`getopt\*(C'\fR takes one mandatory argument, a string containing the option letters that take values. For example, when you call 
.PP
.Vb 1
\&  getopt ('lw');
.Ve
your program will accept `\f(CW\*(C`\-l24 \-w 80\*(C'\fR' and set the variable \f(CW\*(C`$opt_l\*(C'\fR to 24 and \f(CW\*(C`$opt_w\*(C'\fR to 80. Note that the value can be bundled with the option letter but it need not. Other option letters are also accepted (and can be bundled with other letters), for example `\f(CW\*(C`\-ab\*(C'\fR' will set each of the variables \f(CW\*(C`$opt_a\*(C'\fR and \f(CW\*(C`$opt_b\*(C'\fR to the value \f(CW\*(C`1\*(C'\fR. When it is not desired to have (global) variables defined, \f(CW\*(C`getopt\*(C'\fR can be passed a reference to a hash as an optional second argument. Hash keys will be \fIx\fR (where \fIx\fR is the option letter) and the key value will be set to the option value or \f(CW\*(C`1\*(C'\fR if the option did not take a value. 
.PP
Subroutine \f(CW\*(C`getops\*(C'\fR allows a little bit more control over the options. Its argument is a string containing the option letters of \fIall\fR options that are recognized. If an option takes a value, the option letter in the string is followed by a colon. For example, using 
.PP
.Vb 1
\&  getops ('abl:w:');
.Ve
will make your program take options `\f(CW\*(C`a\*(C'\fR' and `\f(CW\*(C`b\*(C'\fR' without a value, and `\f(CW\*(C`l\*(C'\fR' and `\f(CW\*(C`w\*(C'\fR' with a value. Bundling is allowed. Other command line arguments that start with a dash but are not one of these will cause an error message to be printed. As with \f(CW\*(C`getopt\*(C'\fR, a hash reference can be passed as an optional second argument. 
.PP
The functionality provided by \f(CW\*(C`Getopt::Std\*(C'\fR is much better than `\f(CW\*(C`perl \-s\*(C'\fR', but still limited. 
.SH "The advanced way \*(-- \f(CW\*(C`Getopt::Long\*(C'\fR"
.IX Header "The advanced way  Getopt::Long"
Module \f(CW\*(C`Getopt::Long\*(C'\fR defines subroutine \f(CW\*(C`GetOptions\*(C'\fR that takes care of advanced handling of command line options. 
.PP
\&\f(CW\*(C`GetOptions\*(C'\fR makes it possible to have ultimate control over the handling of command line options. It provides support for: 
.Ip "\(bu" 3
single-letter options, with bundling; 
.Ip "\(bu" 3
option words, using a single dash, double dash or plus (using a plus sign was an intermediate standard used by the \s-1GNU\s0 project); 
.Ip "\(bu" 3
a mix of the above, in which case the long options \fImust\fR start with a double dash. 
.PP
Other important features include: 
.Ip "\(bu" 3
options can take (mandatory or optional) values; 
.Ip "\(bu" 3
option values can be strings or numbers; 
.Ip "\(bu" 3
full control over where the option value will be delivered; 
.Ip "\(bu" 3
full checking of options and values. 
.Sh "Standard operation: option words"
.IX Subsection "Standard operation: option words"
In its standard configuration, \f(CW\*(C`GetOptions\*(C'\fR will handle option words, matching them in a case-insensitive way. Options may be abbreviated to uniqueness. Options and other command line arguments may be mixed, in which case the all options will be processed first and the other arguments will remain in \f(CW\*(C`@ARGV\*(C'\fR. 
.PP
The following call to \f(CW\*(C`GetOptions\*(C'\fR will allow a single option, `\f(CW\*(C`foo\*(C'\fR'. When this option is specified on the command line the variable \f(CW\*(C`$doit\*(C'\fR will be set to value \f(CW\*(C`1\*(C'\fR: 
.PP
.Vb 1
\&  GetOptions ('foo' => \e$doit);
.Ve
In this call, \f(CW\*(C`'foo'\*(C'\fR is the \fIoption control string\fR, and \f(CW\*(C`\e$doit\*(C'\fR the \fIoption destination\fR. Multiple pairs of control strings and destinations may be passed. \f(CW\*(C`GetOptions\*(C'\fR will return a \fItrue\fR result if processing was successful and a \fIfalse\fR result when errors were detected. Besides a \fIfalse\fR result, \f(CW\*(C`GetOptions\*(C'\fR will issue a descriptive error message using \f(CW\*(C`warn\*(C'\fR. 
.PP
The option word may optionally be followed by \fIaliases\fR, alternative option words that refer to the same option, for example: 
.PP
.Vb 1
\&  GetOptions ('foo|bar' => \e$doit);
.Ve
If you want to specify that an option takes a value, for example a string, append `\f(CW\*(C`=s\*(C'\fR' to the option control string: 
.PP
.Vb 1
\&  GetOptions ('foo=s' => \e$thevalue);
.Ve
When you use a colon instead of the equals, the option takes a value only when one is present: 
.PP
.Vb 1
\&  GetOptions ('foo:s' => \e$thevalue, 'bar' => \e$doit);
.Ve
Calling this program with arguments `\f(CW\*(C`\-foo bar blech\*(C'\fR' will deliver value \f(CW\*(C`'bar'\*(C'\fR in \f(CW\*(C`$thevalue\*(C'\fR but when called with `\f(CW\*(C`\-foo \-bar blech\*(C'\fR' \f(CW\*(C`$thevalue\*(C'\fR will be set to an empty string (and \f(CW\*(C`$bar\*(C'\fR will be set to \f(CW\*(C`1\*(C'\fR). 
.PP
Besides strings, options can take numeric values; you can use `=i' or `\f(CW\*(C`:i\*(C'\fR' for integer values and `\f(CW\*(C`=f\*(C'\fR' or `\f(CW\*(C`:f\*(C'\fR' for floating point values. 
.Sh "Using single-letter options and bundling"
.IX Subsection "Using single-letter options and bundling"
To use single-letter options is trivial, but to allow them to be bundled \f(CW\*(C`GetOptions\*(C'\fR needs to be configured first. Module \f(CW\*(C`Getopt::Long\*(C'\fR has a subroutine \f(CW\*(C`Configure\*(C'\fR that can be called with a list of strings, each describing a configuration characteristic. For the bundling of single-letter options, you should use: 
.PP
.Vb 1
\&  Getopt::Long::Configure ('bundling');
.Ve
Now \f(CW\*(C`GetOptions\*(C'\fR will happily accept single-letter options and bundle them: 
.PP
.Vb 1
\&  GetOptions ('a' => \e$all, 'l=i' => \e$length, 'w=i' => \e$width);
.Ve
This will allow command line arguments of the form `\f(CW\*(C`\-a \-l 24 \-w 80\*(C'\fR' but also `\f(CW\*(C`\-al24w80\*(C'\fR'. You can mix these with option words: 
.PP
.Vb 2
\&  GetOptions ('a|all' => \e$all, 'l|length=i' => \e$length,
\&                'w|width=i' => \e$width);
.Ve
However, for the option words, a double dash is required: `\f(CW\*(C`\-\-length 24\*(C'\fR' is acceptible, but `\f(CW\*(C`\-length 24\*(C'\fR' is not. The latter will cause the leading `\f(CW\*(C`l\*(C'\fR' to be interpreted as option letter `\f(CW\*(C`l\*(C'\fR', and then complain that `\f(CW\*(C`ength\*(C'\fR' is not a valid integer value. 
.PP
For maximum confusion, 
.PP
.Vb 1
\&  Getopt::Long::Configure ('bundling_override');
.Ve
will allow option words with a single dash, where the words take precedence over bundled single-letter options. For example: 
.PP
.Vb 1
\&  GetOptions ('a' => \e$a, 'v' => \e$v, 'x' => \e$x, 'vax' => \e$vax);
.Ve
will treat `\f(CW\*(C`\-axv\*(C'\fR' as `\f(CW\*(C`\-a \-x \-v\*(C'\fR' but `\f(CW\*(C`\-vax\*(C'\fR' as a single option word. 
.Sh "Advanced destinations"
.IX Subsection "Advanced destinations"
You do not need to specified the option destination. If no destination is specified, \f(CW\*(C`GetOptions\*(C'\fR will define variables \f(CW\*(C`$opt_\*(C'\fR\fIxxx\fR where \fIxxx\fR is the name of the option, just like \f(CW\*(C`getopt\*(C'\fR and \f(CW\*(C`getopts\*(C'\fR. GetOptions will also accept a reference to a hash as its first argument and deliver the option values there, again just like \f(CW\*(C`getopt\*(C'\fR and \f(CW\*(C`getopts\*(C'\fR. 
.PP
If you do specify the option destination, it does not necessarily need to be a scalar. If you specify a reference to an array, option values are pushed into this array: 
.PP
.Vb 1
\&  GetOptions ('foo=i' => \e@values);
.Ve
Calling this program with arguments `\f(CW\*(C`\-foo 1 \-foo 2 \-foo 3\*(C'\fR' will result in \f(CW\*(C`@values\*(C'\fR having the value \f(CW\*(C`(1,2,3)\*(C'\fR provided it was initially empty. 
.PP
Also, the option destination can be a reference to a hash. In this case, option values can have the form `\fIkey\fR\f(CW\*(C`=\*(C'\fR\fIvalue\fR'. The \fIvalue\fR will be stored in the hash with the given \fIkey\fR. 
.PP
Finally, the destination can be a reference to a subroutine. This subroutine will be called when the option is handled. It gets two arguments passed: the name of the option and the value. 
.PP
A special option control string `\f(CW\*(C`<>\*(C'\fR' can be used in this case to connect a subroutine to handle non-option arguments. This subroutine will be called with the name of the non-option argument. For example: 
.PP
.Vb 1
\&  GetOptions ('x=i' => \e$x, '<>' => \e&doit);
.Ve
When you execute this program with command line arguments `\f(CW\*(C`\-x 1 foo \-x 2 bar\*(C'\fR' this will call subroutine `\f(CW\*(C`doit\*(C'\fR' with argument \f(CW\*(C`'foo'\*(C'\fR (and \f(CW\*(C`$x \*(C'\fRequal to \f(CW\*(C`1\*(C'\fR), and then call `\f(CW\*(C`doit\*(C'\fR' with argument \f(CW\*(C`'bar'\*(C'\fR (and \f(CW\*(C`$x\*(C'\fR equal to 2). 
.Sh "Other configuration characteristics"
.IX Subsection "Other configuration characteristics"
\&\f(CW\*(C`GetOptions\*(C'\fR supports several other configuration characteristics. You can switch off the default behavior to match option words in a case-insensitive way with: 
.PP
.Vb 1
\&  Getopt::Long::Configure ('no_ignore_case');
.Ve
To inhibit automatic abbreviations for option words, use \f(CW\*(C`'no_auto_abbrev'\*(C'\fR. To stop detecting options after the first non-option command line argument, use \f(CW\*(C`'require_order'\*(C'\fR. For a complete list see the \f(CW\*(C`Getopt::Long\*(C'\fR documentation. 
.Sh "Help texts"
.IX Subsection "Help texts"
People often ask me why \f(CW\*(C`GetOptions\*(C'\fR does not provide facilities for help messages regarding command line options. There are two reasons why I have not implemented these. 
.PP
The first reason is that although command line options have a fairly uniform appearance, help messages have not. Whatever format of messages would be supported it would please some and displease lots of others. It would also clobber the calls to \f(CW\*(C`GetOptions\*(C'\fR, requiring long lists of parameters to get all the information passed through. 
.PP
The second reason is that Perl allows a program to contain its own documentation, in so-called \fIPlain Old Documentation\fR (\s-1POD\s0) format, and modules exist that extract this information to supply help messages. The following subroutine uses module \f(CW\*(C`Pod::Usage\*(C'\fR for this purpose, it also shows how \f(CW\*(C`Pod::Usage\*(C'\fR can be demand loaded: 
.PP
.Vb 4
\&  sub options () {
\&        my $help = 0;           # handled locally
\&        my $ident = 0;          # handled locally
\&        my $man = 0;            # handled locally
.Ve
.Vb 17
\&  # Process options.
\&        if ( @ARGV > 0 ) {
\&            GetOptions('verbose'        => \e$verbose,
\&                       'trace'  => \e$trace,
\&                       'help|?' => \e$help,
\&                       'manual' => \e$man,
\&                       'debug'  => \e$debug)
\&              or pod2usage(2);
\&        }
\&        if ( $man or $help ) {
\&            # Load Pod::Usage only if needed.
\&            require "Pod/Usage.pm";
\&            import Pod::Usage;
\&            pod2usage(1) if $help;
\&            pod2usage(VERBOSE => 2) if $man;
\&        }
\&    }
.Ve
The module \f(CW\*(C`Pod::Usage\*(C'\fR can be downloaded from \s-1CPAN\s0, directory \f(CW\*(C`authors/Brad_Appleton\*(C'\fR. The latest version of \f(CW\*(C`Getopt::Long\*(C'\fR\fIfootnote: \*(L"This article describes version 2.17 of Getopt::Long.\*(R"\fR can be found in directory \f(CW\*(C`authors/Johan_Vromans\*(C'\fR. This kit also contains a script template that uses \f(CW\*(C`Getopt::Long\*(C'\fR with \f(CW\*(C`Pod::Usage\*(C'\fR. 
.SH "Other option handling modules"
.IX Header "Other option handling modules"
A few other option handling modules can be found on \s-1CPAN\s0. From directory \f(CW\*(C`modules/by\-category/12_Option_Argument_Parameter_Processing\*(C'\fR the following modules can be downloaded: 
.PP
\&\f(CW\*(C`Getopt::Mixed\*(C'\fR (file \f(CW\*(C`Getopt\-Mixed\-1.008.tar.gz\*(C'\fR) 
.PP
This module provides handling option words and option letters. It was developed a couple of years ago, when \f(CW\*(C`Getopt::Std\*(C'\fR only handled option letters and \f(CW\*(C`Getopt::Long\*(C'\fR only handled option words. It is very much obsolete now. 
.PP
\&\f(CW\*(C`Getopt::Regex\*(C'\fR (file \f(CW\*(C`Getopt\-Regex\-0.02.tar.gz\*(C'\fR) 
.PP
An option handler that uses regular expressions to identify the options, and closures to deliver the option values. 
.PP
\&\f(CW\*(C`Getopt::EvaP\*(C'\fR (file \f(CW\*(C`Getopt\-EvaP\-2.3.1.tar.gz\*(C'\fR) 
.PP
This module uses a table-driven option handler that provides most of the features of \f(CW\*(C`Getopt::Long\*(C'\fR but also includes first level help messages. 
.PP
\&\f(CW\*(C`Getopt::Tabular\*(C'\fR (file \f(CW\*(C`Getopt\-Tabular\-0.2.tar.gz\*(C'\fR) 
.PP
Another table-driven option handler loosely inspired by Tcl/Tk. Powerful, but very complex to set up. 
.SH "_\|_END_\|_"
.IX Header "__END__"
Johan Vromans <jvromans@squirrel.nl> has been engaged in software engineering since 1975. He has been a Perl user since version 2 and participated actively in the development of Perl. Besides being the author of \f(CW\*(C`Getopt::Long\*(C'\fR, he wrote the `Perl5 Desktop Reference' and co-authored `The Webmasters Handbook'. 
